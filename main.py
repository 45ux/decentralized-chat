from encryption.aes import AESCipher
from encryption.kyber import KyberCipher
from encryption.sphincs import SPHINCSPlus
from p2p.vpn import VPNClient
from p2p.tor_client import TorClient
import base64

def main():
    print("游깷 V칤tejte v P2P chatovac칤 aplikaci s VPN a Tor 코ifrov치n칤m!")
    
    # Inicializace
    vpn = VPNClient()
    tor = TorClient()
    kyber = KyberCipher()
    aes = AESCipher()
    sphincs = SPHINCSPlus()

    # Generov치n칤 VPN kl칤캜콢
    private_key, public_key = vpn.generate_keys()
    print(f"VPN ve콏ejn칳 kl칤캜: {public_key}")

    # Konfigurace VPN
    peer_public_key = input("Zadejte ve콏ejn칳 kl칤캜 peeru: ")
    peer_ip = input("Zadejte IP adresu peeru (nap콏. 10.0.0.2): ")
    vpn.configure_vpn(private_key, peer_public_key, peer_ip)

    # P콏칤prava 코ifrovan칠 zpr치vy
    message = input("Zadejte zpr치vu k odesl치n칤: ")
    aes_key = aes.generate_key()
    encrypted_message = aes.encrypt(message, aes_key)
    encrypted_key = kyber.encrypt(base64.b64encode(aes_key).decode(), kyber.generate_keys()[0])
    signature = sphincs.sign(encrypted_message, sphincs.generate_keys()[1])

    # P콏enos zpr치vy
    print("Zpr치va bude odesl치na p콏es VPN nebo Tor...")
    tor.send_message({
        "encrypted_message": encrypted_message,
        "encrypted_key": encrypted_key,
        "signature": signature,
    })

    # P콏ij칤m치n칤
    received_data = tor.receive_message()
    print("P콏ijat치 코ifrovan치 zpr치va:", received_data)

if __name__ == "__main__":
    main()